<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop 环境配置</title>
    <url>/2024/01/10/Hadoop%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="主要步骤">主要步骤</h2>
<h3 id="一、准备虚拟机">一、准备虚拟机</h3>
<p>首先要创建五台一模一样的Ubuntu虚拟机，可在VMware中先安装一个Ubuntu虚拟机，然后克隆出另外四个虚拟机。</p>
<h3 id="二、搭建集群">二、搭建集群</h3>
<h4 id="1-修改hostname">1.修改hostname</h4>
<p>现在有五台虚拟机，改hostname：将其中一台改作master，其余分别改作slave1、slave2、slave3、slave4。让其处于同一局域网中。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/hostname</span><br></pre></td></tr></table></figure></div>
<p>修改后保存。</p>
<h4 id="2-记录五台虚拟机的IP地址">2.记录五台虚拟机的IP地址</h4>
<p>在终端输入<code>ipconfig</code>，可以得到本节点IP。最终可以得到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.242.129	master</span><br><span class="line">192.168.242.130	slave1</span><br><span class="line">192.168.242.131	slave2</span><br><span class="line">192.168.242.132	slave3</span><br><span class="line">192.168.242.133	slave4</span><br></pre></td></tr></table></figure></div>
<p>接下来修改节点IP映射，在每台虚拟机的<code>hosts</code>文件末尾添加上述<code>IP-主机名</code>映射（重启后生效）：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/hosts  </span><br></pre></td></tr></table></figure></div>
<h4 id="3-ping通五台虚拟机">3.ping通五台虚拟机</h4>
<p>利用刚刚记录下来的IP地址，五台虚拟机互相ping通：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ping IP地址/主机名</span><br></pre></td></tr></table></figure></div>
<h4 id="4-配置SSH免密登录">4.配置SSH免密登录</h4>
<p>首先安装SSH：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server  #安装服务，一路回车                     </span><br><span class="line">sudo /etc/init.d/ssh restart  #启动服务                                      </span><br><span class="line">sudo ufw disable   #关闭防火墙     </span><br></pre></td></tr></table></figure></div>
<p>关闭完防火墙，接下来查看是否开通SSH服务：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure></div>
<p>只要出现了以下进程就说明成功了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/10/18/arKLqu23wdTIgbD.png"
                      alt=""
                ></p>
<p>接下来在master节点生成SSH公钥，公钥储存在 <code>/root/.ssh</code> 中</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cd /root/.ssh  </span><br><span class="line">rm ./id_rsa*            # 删除之前生成的公匙（如果有）                  </span><br><span class="line">ssh-keygen -t rsa       # 一直按回车就可以     </span><br></pre></td></tr></table></figure></div>
<p>让master 节点可以无密码 SSH 本机，在 master 节点上执行以下代码：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys</span><br></pre></td></tr></table></figure></div>
<p>完成后可执行<code>ssh master</code>验证一下（需要输入 <code>yes</code>，成功后执行 <code>exit</code> 返回原来的终端）</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh master</span><br></pre></td></tr></table></figure></div>
<p>接着在 master 节点将上述公匙传输到 slave1 节点，过程中需要输入 slave1 节点的密码，传输100%以后就是传过去了：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">scp ./.ssh/id_rsa.pub xpk@slave1:/home/xpk</span><br></pre></td></tr></table></figure></div>
<p>接着在 slave1 节点上，把 master 节点的公钥加入授权：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.ssh        # 如果不存在该文件夹需先创建，若已存在则忽略        </span><br><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys                                   </span><br><span class="line">rm ~/id_rsa.pub    # 用完就可以删掉了</span><br></pre></td></tr></table></figure></div>
<p>在其余 slave 节点重复以上步骤，然后就可以免密码SSH所有 slave 节点了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/10/18/2NYJbqB8ytKh3zZ.png"
                      alt=""
                ></p>
<p>最后在 master 节点修改SSH文件权限（否则之后SSH免密登录可能失效）：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 /root/.ssh/	#修改 .ssh/ 文件夹权限为700</span><br><span class="line">chmod 600 /root/.ssh/authorized_keys 	#修改 authorized_keys 文件权限为700</span><br></pre></td></tr></table></figure></div>
<h4 id="5-安装配置JDK环境变量">5.安装配置JDK环境变量</h4>
<h5 id="下载JDK">下载JDK</h5>
<p>官网： <a class="link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>我下载的是 JDK1.8 ，压缩文件名为<code>jdk-8u391-linux-x64.tar.gz</code>。</p>
<h5 id="解压tar包">解压tar包</h5>
<p>把安装包放到 <code>/usr/local/java/</code> 目录下面（没有java目录的话自行创建），然后解压安装包：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建目录</span></span><br><span class="line">mkdir -p /usr/local/java/	</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf  安装包名称	</span><br></pre></td></tr></table></figure></div>
<h5 id="配置JDK环境变量">配置JDK环境变量</h5>
<p>修改 environment 文件：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件</span></span><br><span class="line">sudo gedit /etc/environment</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件尾部添加如下配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">java</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_391</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_391/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure></div>
<p>修改 profile 文件：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件</span></span><br><span class="line">sudo gedit /etc/profile </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件尾部添加如下配置</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_391</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_391/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH:$HOME/bin</span><br></pre></td></tr></table></figure></div>
<p>配置立即生效：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div>
<p>检查Java命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看java版本</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示如下表示成功</span></span><br><span class="line">java version &quot;1.8.0_391&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_391-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.391-b13, mixed mode)</span><br></pre></td></tr></table></figure></div>
<h4 id="6-安装和配置Hadoop">6.安装和配置Hadoop</h4>
<h5 id="下载Hadoop安装包">下载Hadoop安装包</h5>
<p>Hadoop官网：<a class="link"   href="http://hadoop.apache.org/" >http://hadoop.apache.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>我下载的是 hadoop3 ，压缩文件名为<code>hadoop-3.3.6.tar.gz</code>。</p>
<h5 id="解压Hadoop安装包（只在master做）">解压Hadoop安装包（只在master做）</h5>
<p>把 Hadoop 压缩包放置到<code>/opt/hadoop</code>目录内，然后在 master 主机上执行以下代码：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/hadoop</span><br></pre></td></tr></table></figure></div>
<p>进入<code>/opt/hadoop</code>目录后，执行解压缩命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.3.6.tar.gz</span><br></pre></td></tr></table></figure></div>
<h5 id="配置env文件（只在master做）">配置env文件（只在master做）</h5>
<p>执行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure></div>
<p>找到<code>export JAVA_HOME</code>这行，修改为：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_391/</span><br></pre></td></tr></table></figure></div>
<h5 id="配置核心组件文件（只在master做）">配置核心组件文件（只在master做）</h5>
<p>Hadoop 的核心组件文件是<code>core-site.xml</code>，位于<code>/opt/hadoop/hadoop/etc/hadoop</code>子目录下，将下面的配置代码放在文件的<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间。</p>
<p>执行编辑<code>core-site.xml</code>文件的命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure></div>
<p>需要在<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间加入的代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;/opt/hadoop/hadoopdata&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></div>
<p>编辑完成后，退出并保存即可。</p>
<h5 id="配置文件系统（只在master做）">配置文件系统（只在master做）</h5>
<p>Hadoop 的文件系统配置文件是<code>hdfs-site.xml</code>，位于<code>/opt/hadoop/hadoop/etc/hadoop</code>子目录下，将以下代码放在文件的<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间。</p>
<p>执行编辑<code>hdfs-site.xml</code>文件的命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure></div>
<p>需要在<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间加入的代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></div>
<p>编辑完成后，退出保存即可。</p>
<h5 id="配置yarn-site-xml文件（只在master做）">配置yarn-site.xml文件（只在master做）</h5>
<p>yarn 的站点配置文件是<code>yarn-site.xml</code>，位于<code>/opt/hadoop/hadoop/etc/hadoop</code>子目录下，将以下代码放在文件的<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间。</p>
<p>执行编辑<code>yarn-site.xml</code>文件的命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure></div>
<p>需要在<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间加入的代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:18040&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:18030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:18025&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:18141&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;master:18088&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></div>
<h5 id="配置MapReduce计算框架文件（只在master做）">配置MapReduce计算框架文件（只在master做）</h5>
<p>配置文件是<code>mapred-site.xml</code>，在<code>/opt/hadoop/hadoop/etc/hadoop</code>子目录下，将下面的代码填充到文件的<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间。</p>
<p>执行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure></div>
<p>需要在<code>&lt;configuration&gt;</code>和<code>&lt;/configuration&gt;</code>之间加入的代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></div>
<p>编辑完毕，保存退出即可。</p>
<h5 id="配置master的workers文件（只在master做）">配置master的workers文件（只在master做）</h5>
<p>workers 文件给出了 Hadoop 集群的 slave 节点列表，该文件十分重要，因为启动 Hadoop 的时候，系统总是根据当前workers 文件中的 slave 节点名称列表启动集群，不在列表中的 slave 节点便不会被视为计算节点。</p>
<p>执行编辑 workers 文件命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/workers</span><br></pre></td></tr></table></figure></div>
<p>加入以下代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">slave3</span><br><span class="line">slave4</span><br></pre></td></tr></table></figure></div>
<p>注意：删除 workers 文件中原来 localhost 那一行。</p>
<h5 id="复制master上的Hadoop到slave节点（只在master做）">复制master上的Hadoop到slave节点（只在master做）</h5>
<p>通过复制master节点上的 Hadoop ，能够大大提高系统部署效率。由于我这里有4个 slave 节点，所以复制4次。</p>
<p>复制命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">scp -r /opt/hadoop root@slave1:/opt</span><br><span class="line">scp -r /opt/hadoop root@slave2:/opt</span><br><span class="line">scp -r /opt/hadoop root@slave3:/opt</span><br><span class="line">scp -r /opt/hadoop root@slave4:/opt</span><br></pre></td></tr></table></figure></div>
<h5 id="配置操作系统环境变量（五个节点都做）">配置操作系统环境变量（五个节点都做）</h5>
<p>回到用户目录命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop</span><br></pre></td></tr></table></figure></div>
<p>然后编辑<code>.bash_profile</code>文件，命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bash_profile</span><br></pre></td></tr></table></figure></div>
<p>最后把以下代码追加到文件的尾部：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#HADOOP</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop/hadoop</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div>
<p>保存退出后，执行命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></div>
<p><code>source ~/.bash_profile</code>命令是使上述配置生效。</p>
<p>提示：在其余 slave 节点使用上述相同的配置方法，配置全部 slave 节点。</p>
<h5 id="创建Hadoop数据目录（只在master做）">创建Hadoop数据目录（只在master做）</h5>
<p>创建数据目录，命令是：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/hadoop/hadoopdata</span><br></pre></td></tr></table></figure></div>
<h5 id="格式化文件系统（只在master做）">格式化文件系统（只在master做）</h5>
<p>执行格式化文件系统命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure></div>
<h3 id="三、Hadoop集群的启动与关闭">三、Hadoop集群的启动与关闭</h3>
<h4 id="1-启动和关闭Hadoop集群（只在master做）">1.启动和关闭Hadoop集群（只在master做）</h4>
<p>首先进入安装主目录，命令是：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop/hadoop/sbin</span><br></pre></td></tr></table></figure></div>
<p>然后启动，命令是：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure></div>
<p>如果要关闭 Hadoop 集群，可以使用命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">./stop-all.sh</span><br></pre></td></tr></table></figure></div>
<h4 id="2-验证Hadoop集群是否启动成功">2.验证Hadoop集群是否启动成功</h4>
<p>在 master 节点的浏览器中输入<code>localhost:9870/</code>并回车。打开 HDFS 面板查看详细信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/10/PHrsxtvNiIFGmkT.png"
                      alt=""
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/10/x4uYlirEd5U2hgy.png"
                      alt=""
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/10/zUywuYjHvRTX3sa.png"
                      alt=""
                ></p>
<h3 id="参考资料：">参考资料：</h3>
<p><a class="link"   href="https://blog.csdn.net/weixin_52105111/article/details/123159877" >三台Ubuntu虚拟机搭建 Hadoop集群 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.51cto.com/u_12835254/5273118" >Linux：Ubuntu配置jdk环境变量 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44198965/article/details/89603788?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164601575316780271530136%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164601575316780271530136&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-89603788.pc_search_result_cache&amp;utm_term=hadoop%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187" >Hadoop安装与配置详细教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="遇到的-问题-解决方法">遇到的 问题&amp;解决方法</h2>
<h3 id="一、部分Ubuntu虚拟机无法连接网络">一、部分Ubuntu虚拟机无法连接网络</h3>
<h4 id="问题：">问题：</h4>
<p>安装之后可以正常使用，但是隔了一段时间再上就发现有一两台虚拟机连不上网络。</p>
<h4 id="解决：">解决：</h4>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service NetworkManager stop</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">sudo service NetworkManager start</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/NetworkManager/NetworkManager.conf	<span class="comment">#把false改成true</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service NetworkManager restart</span><br></pre></td></tr></table></figure></div>
<h4 id="参考资料：-2">参考资料：</h4>
<p><a class="link"   href="https://blog.csdn.net/lj695242104/article/details/80922108" >ubuntu 18.04 网络图标不见的问题解决方案 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="二、第一次运行Hadoop时，出现以下报错：">二、第一次运行Hadoop时，出现以下报错：</h3>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ERROR: Attempting to operate on hdfs namenode as root</span><br><span class="line">ERROR: but there is no HDFS_NAMENODE_USER defined. </span><br><span class="line">Aborting operation.</span><br><span class="line">Starting datanodes</span><br><span class="line">ERROR: Attempting to operate on hdfs datanode as root</span><br><span class="line">ERROR: but there is no HDFS_DATANODE_USER defined. </span><br><span class="line">Aborting operation.</span><br><span class="line">Starting secondary namenodes</span><br><span class="line">ERROR: Attempting to operate on hdfs secondarynamenode as root</span><br><span class="line">ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. </span><br><span class="line">Aborting operation.</span><br></pre></td></tr></table></figure></div>
<h4 id="解决：-2">解决：</h4>
<p>在<code>$HADOOP_HOME/etc/hadoop/hadoop-env.sh</code>中添加以下内容：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_DATANODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure></div>
<h4 id="参考资料：-3">参考资料：</h4>
<p><a class="link"   href="https://stackoverflow.com/questions/48129029/hdfs-namenode-user-hdfs-datanode-user-hdfs-secondarynamenode-user-not-defined" >HDFS_NAMENODE_USER, HDFS_DATANODE_USER &amp; HDFS_SECONDARYNAMENODE_USER not defined <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="三、主节点启动成功，从节点没有启动">三、主节点启动成功，从节点没有启动</h3>
<h4 id="解决：-3">解决：</h4>
<p>执行编辑 workers 文件命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/hadoop/hadoop/etc/hadoop/workers</span><br></pre></td></tr></table></figure></div>
<p>加入以下代码：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">slave3</span><br><span class="line">slave4</span><br></pre></td></tr></table></figure></div>
<h4 id="原因分析：">原因分析：</h4>
<p>网上教程用的是Hadoop 2 版本，配置 slave 节点列表文件时修改的是<code>slaves</code>文件；而我使用的是 Hadoop 3 版本，Hadoop 3 版本里的配置文件需要修改<code>workers</code>文件，而不是<code>slaves</code>文件。</p>
<h4 id="参考资料：-4">参考资料：</h4>
<p><a class="link"   href="https://blog.51cto.com/u_16099172/6391674" >hadoop从节点进程缺失 hadoop从节点没有启动 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce 配置与操作</title>
    <url>/2024/01/11/MapReduce%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="一、通过eclipse连接hadoop">一、通过eclipse连接hadoop</h3>
<h4 id="1-主要步骤">1. 主要步骤</h4>
<ul>
<li>
<p>安装eclipse</p>
</li>
<li>
<p>安装Hadoop-Eclipse-Plugin</p>
</li>
<li>
<p>配置Hadoop-Eclipse-Plugin</p>
</li>
</ul>
<p>参考资料已给出此部分详细步骤，因此此处不再展开，仅给出实现效果如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/17/5e8bfMxDjoOsPVL.png"
                      style="zoom: 67%;" 
                >
<h4 id="2-参考资料">2. 参考资料</h4>
<ul>
<li><a class="link"   href="https://blog.csdn.net/u010185220/article/details/79095179" >windows10上使用Eclipse配置Hadoop开发环境详细步骤+WordCount示例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="3-遇到的问题">3. 遇到的问题</h4>
<ul>
<li>
<h5 id="新添加的插件在Eclipse中不显示">新添加的插件在Eclipse中不显示</h5>
<ul>
<li>
<p>解决方法</p>
<p>在 <code>eclipse/configuration</code> 目录下的 <code>config.ini</code> 文件中加入一行 : <code>osgi.checkConfiguration=true</code>，这样它就会寻找并安装插件。</p>
</li>
<li>
<p>参考资料</p>
<p><a class="link"   href="https://blog.csdn.net/qq_38789941/article/details/86244990" >Eclipse 安装插件后不显示的解决办法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
</li>
</ul>
<h3 id="二、WordCount示例">二、WordCount示例</h3>
<h4 id="1-主要步骤-2">1. 主要步骤</h4>
<p>参考资料已给出此部分详细步骤，因此此处仅列举出主要步骤。</p>
<ul>
<li>
<p>新建项目</p>
</li>
<li>
<p>在项目的src目录下创建<code>WordCount.java</code>类，内容如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Package;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCount</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">StringTokenizer</span> <span class="variable">itr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(value.toString());</span><br><span class="line">            <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntSumReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">                sum += val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        String[] otherArgs = <span class="keyword">new</span> <span class="title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; &lt;out&gt;&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在项目的src目录下创建<code>log4j.properties</code>文件，内容如下：</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configure logging for testing:optionally with log file </span></span><br><span class="line"><span class="comment">#log4j.rootLogger=debug,appender </span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">info,appender </span></span><br><span class="line"><span class="comment">#log4j.rootLogger=error,appender </span></span><br><span class="line"><span class="comment">#\u8F93\u51FA\u5230\u63A7\u5236\u53F0 </span></span><br><span class="line"><span class="attr">log4j.appender.appender</span>=<span class="string">org.apache.log4j.ConsoleAppender </span></span><br><span class="line"><span class="comment">#\u6837\u5F0F\u4E3ATTCCLayout </span></span><br><span class="line"><span class="attr">log4j.appender.appender.layout</span>=<span class="string">org.apache.log4j.TTCCLayout</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>配置运行参数</p>
</li>
<li>
<p>运行</p>
</li>
</ul>
<h4 id="2-运行结果">2. 运行结果</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/17/o6ERhliMpC85qPm.png"
                      alt=""
                ></p>
<p>其中，<code>word.txt</code> 文件内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line"></span><br><span class="line">hello hadoop !</span><br><span class="line">hello world !</span><br></pre></td></tr></table></figure></div>
<p>程序输出 <code>hdfs://192.168.242.129:9000/hadoop-user/output.txt/part-r-00000</code> 文件内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">!	2</span><br><span class="line">a	3</span><br><span class="line">b	3</span><br><span class="line">c	3</span><br><span class="line">d	1</span><br><span class="line">e	1</span><br><span class="line">f	1</span><br><span class="line">hadoop	1</span><br><span class="line">hello	2</span><br><span class="line">world	1</span><br></pre></td></tr></table></figure></div>
<p>词频统计结果无误。</p>
<h4 id="3-参考资料">3. 参考资料</h4>
<ul>
<li><a class="link"   href="https://cwiki.apache.org/confluence/display/HADOOP2/WordCount" >WordCount Example <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/u010185220/article/details/79095179" >windows10上使用Eclipse配置Hadoop开发环境详细步骤+WordCount示例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="4-遇到的问题">4. 遇到的问题</h4>
<ul>
<li>
<h5 id="环境变量问题">环境变量问题</h5>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: java.io.FileNotFoundException: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</span><br></pre></td></tr></table></figure></div>
<ul>
<li>
<p>问题分析</p>
<p>从错误信息中可以看到，Hadoop在执行<code>Shell.getWinUtilsPath</code>的时候抛出了异常。这是因为Hadoop在进行某些本地文件系统操作时，依赖于一些环境变量，其中包括<code>HADOOP_HOME</code>。这两个变量都没有被正确设置，导致了<code>FileNotFoundException</code>。</p>
</li>
<li>
<p>解决方法</p>
<p>在项目运行配置中指定<code>HADOOP_HOME</code>环境变量及其值：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/11/17/3dmlWo9A8LMwkSU.png"
                      alt=""
                ></p>
</li>
<li>
<p>参考资料</p>
<ul>
<li><a class="link"   href="https://cwiki.apache.org/confluence/display/HADOOP2/WindowsProblems" >Problems running Hadoop on Windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
</li>
<li>
<h5 id="权限错误问题">权限错误问题</h5>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[Thread-5] WARN org.apache.hadoop.mapred.LocalJobRunner - job_local2147375942_0001</span><br><span class="line">org.apache.hadoop.security.AccessControlException: Permission denied: user=23876, access=WRITE, inode=&quot;/hadoop-user&quot;:root:supergroup:drwxr-xr-x</span><br><span class="line">[main] INFO org.apache.hadoop.mapreduce.Job - Job job_local2147375942_0001 failed with state FAILED due to: NA</span><br></pre></td></tr></table></figure></div>
<ul>
<li>
<p>问题分析</p>
<p>这个错误表明在本地运行作业时，用户尝试写入目录<code>/hadoop-user</code>时遇到权限问题，并导致作业以失败结束。</p>
</li>
<li>
<p>解决方法</p>
<p>在master节点中执行以下代码，以赋予当前用户对目标HDFS文件夹的写权限：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /hadoop-user/</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>参考资料</p>
<ul>
<li><a class="link"   href="https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_permissions_guide.html#%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7" >HDFS权限管理用户指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.cnblogs.com/yinzhengjie2020/p/13737254.html" >HDFS权限管理篇-博客园 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>高级数据库技术 - 复习</title>
    <url>/2024/01/13/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>文中PPT截图引用自：中国科学技术大学 金培权老师</p>
</blockquote>
<h2 id="第1章-数据库系统概述">第1章 数据库系统概述</h2>
<p>1、DBMS系统结构组成</p>
<p>2、数据库、DBMS、数据库系统</p>
<h2 id="第2章-关系数据库技术回顾"><strong>第2章</strong> 关系数据库技术回顾</h2>
<p>1、数据模型和关系数据模型</p>
<p>2、SQL</p>
<p>3、三级模式结构与数据独立性</p>
<h2 id="第3章-数据库设计">第3章 数据库设计</h2>
<p>1、函数依赖的概念</p>
<h3 id="2、最小函数依赖集">2、最小函数依赖集</h3>
<ul>
<li>
<p>概念</p>
<ul>
<li>给定一个函数依赖集S，若能找到一个远小于S的等价函数依赖集T，则DBMS只要实现T就可实现S中的所有函数依赖</li>
</ul>
</li>
<li>
<p>计算</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/guaG4vcoVEZ93zW.png"
                      style="zoom: 48%;" 
                >
</li>
</ul>
<h3 id="3、码的形式化定义">3、码的形式化定义</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/iFlOsbpfnRj9Wu1.png"
                      style="zoom: 52.5%;" 
                >
<h3 id="4、1NF、2NF、3NF、BCNF">4、1NF、2NF、3NF、BCNF</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/C9gFc6RbdsK7Grj.png"
                      style="zoom:50.8%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/X6iHbLD79UI34J8.png"
                      style="zoom:51.6%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/sz5AnZ3jVyCgWio.png"
                      style="zoom:51.5%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/12/6G2fnXJO8zgMQtm.png"
                      style="zoom:50.8%;" 
                >
<h3 id="5、无损并且保持函数依赖分解到3NF的算法">5、无损并且保持函数依赖分解到3NF的算法</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/KeAMoWNk9RCcqPZ.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/lHpma8vq6D5X4Tz.png"
                      style="zoom:63.7%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/gy1EPABntiaLMF5.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Nx1idoeMZhVzsJ7.png"
                      style="zoom:50.5%;" 
                >
<p>6、无损分解到BCNF的算法</p>
<p>7、数据库设计过程以及各个过程的主要工作</p>
<p>8、ER设计的基本方法</p>
<p>9、逻辑设计的主要工作</p>
<p>10、ER模型到关系模型的转换方法</p>
<h2 id="第4章-数据存储">第4章 数据存储</h2>
<h3 id="1、磁盘块存取时间">1、磁盘块存取时间</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/UVQIsu2Kh1TSaCW.png"
                      style="zoom:52.5%;" 
                >
<p>2、存储器结构</p>
<p>3、不同类型存储介质之间的差异</p>
<h2 id="第5章-数据表示">第5章 数据表示</h2>
<p>1、数据项的表示</p>
<p>2、记录的表示</p>
<h3 id="3、记录在磁盘块中的组织">3、记录在磁盘块中的组织</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/GgXKW5TmRq6y8L7.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/uRr3JNcLEhIiZzp.png"
                      style="zoom:51.5%;" 
                >
<h4 id="其他问题">其他问题</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/4xYgs2J38XHyFGD.png"
                      style="zoom: 45%;" 
                >
<h5 id="1、记录在块内的分隔">1、记录在块内的分隔</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/6lEzecpShMLQC5F.png"
                      style="zoom:50%;" 
                >
<h5 id="2、跨块VS-不跨块">2、跨块VS.不跨块</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/yWpSt6vBz8l7EXV.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/rOU4asCZyRNwPtA.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/YmDdrxPOVEsoH16.png"
                      style="zoom:50%;" 
                >
<h5 id="3、不同类型的记录聚簇">3、不同类型的记录聚簇</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/vqrjVo5b73EO1yt.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/UnD26c1AMyQVfst.png"
                      style="zoom:50%;" 
                >
<h5 id="4、在块中按序存储记录">4、在块中按序存储记录</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/NKBZuD1EtesknM6.png"
                      style="zoom:50%;" 
                >
<h5 id="5、记录的分裂">5、记录的分裂</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/YQtKbDhrGOU9A1n.png"
                      style="zoom:50%;" 
                >
<h5 id="6、记录的地址">6、记录的地址</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/1jEcXa2bTzi6qmr.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/a4gyFUMLpdczerS.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/9TGXmpjcdRxwIJL.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/BU8ZD4fletVKsOx.png"
                      style="zoom:50%;" 
                >
<h5 id="7、记录的修改">7、记录的修改</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/KqQDiuYlJBPLmHM.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/SUNQdTW3VbPDxlo.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/uOWGeRZLSmHyvp7.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/saUicFHQxVqdzt9.png"
                      style="zoom:50%;" 
                >
<p>4、链表式堆文件和目录式堆文件</p>
<h2 id="第6章-缓冲区管理">第6章 缓冲区管理</h2>
<h3 id="1、缓冲区结构、frame-dirty-pin-count等概念的含义">1、缓冲区结构、frame/dirty/pin-count等概念的含义</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/EwMrW3XBnmSgKil.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/XRrThE7dzVoM4ju.png"
                      style="zoom:50%;" 
                >
<h3 id="2、缓冲区置换算法">2、缓冲区置换算法</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/bUuFOtz3BjK1Qoa.png"
                      style="zoom:50%;" 
                >
<h4 id="0、OPT算法">0、OPT算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/VY4v1X3HNmBMoqP.png"
                      style="zoom:50%;" 
                >
<h4 id="1、LRU算法">1、LRU算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/5xkOZoqJ2a6vfcK.png"
                      style="zoom:50%;" 
                >
<h4 id="2、LRU-K算法">2、LRU-K算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Ysdpm7uVUkyHSIK.png"
                      style="zoom:50%;" 
                >
<h4 id="3、2Q算法">3、2Q算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ELuYHUPBlcJZams.png"
                      style="zoom:50%;" 
                >
<h4 id="4、Second-Chance-FIFO算法">4、Second-Chance FIFO算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/PWEJgNeZAXGrdz5.png"
                      style="zoom:50%;" 
                >
<h4 id="5、CLOCK算法">5、CLOCK算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Ax2lqY8WPk5mf1O.png"
                      style="zoom:50%;" 
                >
<h4 id="6、SSD上的置换算法">6、SSD上的置换算法</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/QEcRVfsdXuDyk6x.png"
                      style="zoom:50%;" 
                >
<p>3、缓冲区管理器的实现</p>
<h2 id="第7章-索引结构">第7章 索引结构</h2>
<p>1、顺序文件上的索引：密集索引和稀疏索引</p>
<p>2、非顺序文件上的辅助索引</p>
<h3 id="3、散列表、动态散列">3、散列表、动态散列</h3>
<h4 id="散列表概念">散列表概念</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/tI7blFWX4Ko9AOn.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/by46NLYajF5uWOV.png"
                      style="zoom:50%;" 
                >
<h4 id="散列表查找">散列表查找</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/QO6zEP8yfUjt4wD.png"
                      style="zoom:50%;" 
                >
<h4 id="散列表插入">散列表插入</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/5GiYMkVmpoAKZCl.png"
                      style="zoom:50%;" 
                >
<h4 id="散列表删除">散列表删除</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/oLWCZUH7zT6EANj.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/arXRevPu4GShEQN.png"
                      style="zoom:50%;" 
                >
<h4 id="散列表空间利用率">散列表空间利用率</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/XuFISck7oTUK81m.png"
                      style="zoom:50%;" 
                >
<h4 id="动态散列表">动态散列表</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ydifKq3wHzTpGum.png"
                      style="zoom:50%;" 
                >
<h5 id="可扩展散列表">可扩展散列表</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/AcXWw6N7JhiHDYC.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/LlAzou41aNBQ8yt.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ZkbExODFsoAQ6LV.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/D6OSCQKxU5HRJnd.png"
                      style="zoom:50%;" 
                >
<h5 id="线性散列表">线性散列表</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/k1F4XdIeYugPZ6y.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/5MDTh9uyYJNElWq.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/4hUDJdneOvbKgSQ.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/HiaepqFWc4ktMLb.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/AY7CNVGgKIfMqUn.png"
                      style="zoom:50%;" 
                >
<h3 id="4、B-Tree">4、B+ Tree</h3>
<h4 id="概念与性质">概念与性质</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/2PzIqlDN9BprGy4.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/boUITw2qurVpZGN.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/XG3gVcn6FjIZJYH.png"
                      style="zoom:50%;" 
                >
<h4 id="查找、插入与删除">查找、插入与删除</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/VNLHjvpFPThwkyK.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/KCQ1isov7Ack98z.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ulrBH6imzTCdxNq.png"
                      style="zoom:50%;" 
                >
<h4 id="效率">效率</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/y6g7TDAxsFIKqnd.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/iktL6qIaMrheWyp.png"
                      style="zoom:50%;" 
                >
<h2 id="第8章-查询优化">第8章 查询优化</h2>
<p>1、查询处理器的工作过程</p>
<p>2、关系代数与SQL之间的关系</p>
<h3 id="3、中间结果大小估计">3、中间结果大小估计</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/xPXtoCHIWwS2u9T.png"
                      style="zoom:50%;" 
                >
<h4 id="×运算">×运算</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/mJbWQIyZGtlcXzk.png"
                      style="zoom:50%;" 
                >
<h4 id="σ运算">σ运算</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/DI7mEoyp291nsvk.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/cMAprmKUDbq7WCh.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/RexGPnFSphtmOT1.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/aAVxRrWwJDgb6lB.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/snechVxpGPCuH3B.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/uFr6LSkvIEQoCp3.png"
                      style="zoom:50%;" 
                >
<h4 id="⋈运算">⋈运算</h4>
<h5 id="对T-W-的估计">对T(W)的估计</h5>
<h6 id="没有公共属性">没有公共属性</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/By1GATiYSlqWwdm.png"
                      style="zoom:50%;" 
                >
<h6 id="有公共属性">有公共属性</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/FjyI6WUXfhewsSt.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ZrwxC5mvlfgcHL8.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/9dLvHmD72OEBpY6.png"
                      style="zoom:50%;" 
                >
<h5 id="对S-W-的估计">对S(W)的估计</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/cJAPjgMri4mRfIV.png"
                      style="zoom:50%;" 
                >
<h5 id="对V-W-的估计">对V(W,*)的估计</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/lYW9mOG7oXgI5My.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Db5wgSh6acF8TIj.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/mVDsBA2iqcEgzPU.png"
                      style="zoom:50%;" 
                >
<p>4、I/O代价的影响因素</p>
<h2 id="第9章-连接算法">第9章 连接算法</h2>
<p>重点：连接算法的I/O代价估计与内存开销</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/kJWKBHAPxfewy1S.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/4OGvyTtRluPx9jq.png"
                      style="zoom:50%;" 
                >
<h3 id="嵌套循环连接">嵌套循环连接</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Agzpeu3nkj7rqoL.png"
                      style="zoom:50%;" 
                >
<h4 id="非连续存放">非连续存放</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/PLcBTnpQhz3yoqa.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/UGdBZigfSF1EaHN.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ZnwXJ7UkzTHlIt5.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/pOiaxrFAJC2WhK4.png"
                      style="zoom:50%;" 
                >
<h4 id="连续存放">连续存放</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Qt3woMhT6jymAKs.png"
                      style="zoom:50%;" 
                >
<h3 id="归并连接">归并连接</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/TjEsDirwgu2dp7b.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/PWRSOjy8ZduoLNg.png"
                      style="zoom:50%;" 
                >
<h4 id="连续存放、记录有序">连续存放、记录有序</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/fDiAmUC8XoaBuEG.png"
                      style="zoom:50%;" 
                >
<h4 id="连续存放、记录无序">连续存放、记录无序</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/NhuRCrvdkE4l68n.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/h8D7tqKU5FXfnLv.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/NSHIOGeVbCATLuM.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/u1n6ITEhvN2A7iC.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/LCYNjIs4wQDifUW.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/yKn2WwiJgYhvtcx.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/fnlJqTcGQieKz6a.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/hTB1juJbozHMSsK.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/nLYMjVyigIakKU6.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/jPgd3fw8qxySIR9.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/vLM1a2ZcQq3XjK9.png"
                      style="zoom: 50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/FMbjYDigBAEC7pJ.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ZatmsXjbUnMYxBO.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/3DQcbmv2VaIMAqr.png"
                      style="zoom:50%;" 
                >
<h3 id="索引连接">索引连接</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/dpEQuFMgzXvR49h.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/1PyRHlDdUfS9mtF.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/ZzOL73imsk2yV6d.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/2ntxwAijo48UBXO.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/is4oHEFSVMlLIdu.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/jlmt1c3LJUER6GY.png"
                      style="zoom:50%;" 
                >
<h3 id="散列连接">散列连接</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/yBIsLKn2Yom1TXj.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/Ijt1Ee5sOHiFQMJ.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/lJRsQu1kWiDvNYG.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/wFDs6m4Cl25BtXp.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/RFBr6UnL8Wc3aPu.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/aA529htcwsCDvrV.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/3Y6FvkeURzZE5Pu.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/13/JPIt7VqfxHEZWOl.png"
                      style="zoom:50%;" 
                >
<h2 id="第10章-故障与恢复">第10章 故障与恢复</h2>
<p>1、数据库的一致性概念</p>
<p>2、事务的基本概念、ACID和原子操作</p>
<h3 id="3、WAL的概念">3、WAL的概念</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/cegrINLiJQO5thC.png"
                      style="zoom:50%;" 
                >
<h3 id="4、Undo日志、Redo日志、Undo-Redo日志">4、Undo日志、Redo日志、Undo/Redo日志</h3>
<h4 id="Undo日志">Undo日志</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/xbZqeoPmp2O1Ti8.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/pMlaH4IvyVhsr73.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:/Users/23876/AppData/Roaming/Typora/typora-user-images/image-20240114145545566.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/2e7IyNSE5PiXOHY.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/e8gkrPAyDqFWE3V.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/1VJvGg2k4zsiNO6.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/nMTufHGxK3UzVZI.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/4ylSXC7sM5WE1Nf.png"
                      style="zoom:50%;" 
                >
<h4 id="Redo日志">Redo日志</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/LUIDVH6usxmpero.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/jGT8Hc6rDdgfW1t.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/fH1MSRZDbzWVApL.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/YwrlAa6xkNojC9V.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/vUWm9xTk2QE6Jdz.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/52c8F4sMNCuUvlS.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/45eBQprimZVSXwa.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/GWwZYDieLzmUTFu.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/J6Ebi98tWlA1TMU.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/kRur2UavYfncQWX.png"
                      style="zoom:50%;" 
                >
<h4 id="Undo-Redo日志">Undo/Redo日志</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/fA6DvX8Tr4H1Qdi.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/dXhsBjrNt1mcOoq.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/hTkpg9DZ6YnPsd3.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/hnlPrAX6MGIWade.png"
                      style="zoom:50%;" 
                >
<p>5、Checkpoint</p>
<h2 id="第11章-并发控制">第11章 并发控制</h2>
<h3 id="1、并发操作可能带来什么问题？">1、并发操作可能带来什么问题？</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/N9qZFDb3T26P1mp.png"
                      style="zoom:50%;" 
                >
<h4 id="丢失更新问题">丢失更新问题</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/aNikDPyIMhnEv9r.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/z9Ge5IFnqiNSx3p.png"
                      style="zoom:50%;" 
                >
<h4 id="脏读问题">脏读问题</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/ltT6uB5HbhIUsgQ.png"
                      style="zoom:50%;" 
                >
<h4 id="不一致分析问题">不一致分析问题</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/etj9X8RcvdGDuB6.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/tMeQbmrZo1kRB3A.png"
                      style="zoom:50%;" 
                >
<p>2、可串性的概念</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/mb42BrE5LVkeDZi.png"
                      style="zoom:50%;" 
                >
<h3 id="3、冲突可串性及其判定方法">3、冲突可串性及其判定方法</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/kF5LiYmPNc6dWAg.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/xjMTPrH5SNncGA3.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/wm6jHa9Oe7f5dnG.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/gZ3nIQkiJx4Wsao.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/fyZw34As5zNm6j1.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/eZhwbcMDU5t3vPL.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/YPXEDoIW7jd8SMz.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/uFdD7eOcRTjB4KU.png"
                      style="zoom:50%;" 
                >
<h3 id="4、锁的相关概念">4、锁的相关概念</h3>
<h4 id="X锁">X锁</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/mtCyW6aoeLiqzUl.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/24RF3iJMbLxhu15.png"
                      style="zoom:50%;" 
                >
<h4 id="S锁">S锁</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/9SB5woHaqmXZIys.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/kbFEoQpxTSrIvdA.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/8L9m4GpjlsY5MSk.png"
                      style="zoom:50%;" 
                >
<h4 id="Update锁">Update锁</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/YbmWQU4XpEy98xC.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/daHlFQ9YROgwjKZ.png"
                      style="zoom:50%;" 
                >
<p>5、2PL的含义？如何使用2PL保证并发事务的可串行性？</p>
<h3 id="6、事务的隔离级别">6、事务的隔离级别</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/5ZTVeKRqfsCh8uO.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/shIfiQ2c5AgJHkE.png"
                      style="zoom:50%;" 
                >
<h4 id="未提交读（脏读）">未提交读（脏读）</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/dfbJconkjGsySa9.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/Ve5ZkfW1hSspXmn.png"
                      style="zoom:50%;" 
                >
<h4 id="提交读">提交读</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/Wt5RwhvYqoyc1kx.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/hMxYrEIA4zWO2mQ.png"
                      style="zoom:50%;" 
                >
<h4 id="可重复读">可重复读</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/vkHGhZgouUqltTb.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/zLB5qjNWX8PQxcn.png"
                      style="zoom:50%;" 
                >
<h4 id="可串行读">可串行读</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/vzdqWoltcmKyU67.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/7UPTSkgc4CMRHwF.png"
                      style="zoom:50%;" 
                >
<h3 id="7、死锁">7、死锁</h3>
<h4 id="死锁出现的条件">死锁出现的条件</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/YfzLt8osAeJKhiX.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/wZEfQFMUT1q2J6G.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/Tg2jMXGhNwpqSQO.png"
                      style="zoom:50%;" 
                >
<h4 id="死锁的两种处理策略">死锁的两种处理策略</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/xnwtzZqT6rGBk7s.png"
                      style="zoom:50%;" 
                >
<h5 id="死锁检测">死锁检测</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/WMtURpIgeodSuqm.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/LW7Ryr3sUZ29Cgb.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/IsoxyNnTMgKiLwO.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/J2RNv3pIsub9nHV.png"
                      style="zoom:50%;" 
                >
<h5 id="死锁预防">死锁预防</h5>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/ZlegTb81WCuB6Pn.png"
                      style="zoom:50%;" 
                >
<h6 id="方法1：Priority-Order">方法1：Priority Order</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/EDFVavX4Ce58qAS.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/4dmIiXpy7xwrjDb.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/X5M8p1BRyjighfn.png"
                      style="zoom:50%;" 
                >
<h6 id="方法2：Timestamp">方法2：Timestamp</h6>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/ZUdbvxzwmpGlCV2.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/ChQeqt2iSwEuTzI.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/qEfNdHXtlFIUcgs.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/CjwZDTivLtPfJsX.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/KwTMCXOUiPkVfvj.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/RSmjvwUZIQYAd8f.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/14/XPCYcMaL6JFUu4h.png"
                      style="zoom:50%;" 
                >
<p>8、乐观并发控制技术</p>
<h2 id="第12章-NoSQL数据库">第12章 NoSQL数据库</h2>
<p>1、NoSQL数据库的特点</p>
<p>2、NoSQL产生的原因</p>
<p>3、NoSQL与RDBMS的对比</p>
<p>4、NoSQL数据库主要的4种类型</p>
<p>5、CAP和BASE理论</p>
<p>6、LSM-tree</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 报错：SSH连接超时</title>
    <url>/2024/01/19/Git%E6%8A%A5%E9%94%99-SSH%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>使用 Git 向 GitHub 部署代码时，报错如下（此前正常）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure></div>
<h2 id="原因">原因</h2>
<p>SSH 端口被占用，重新指定一个端口即可。</p>
<p>注：<em>Windows 系统查看端口占用情况的命令为：<code>netstat -ano | findStr 端口号</code></em></p>
<h2 id="解决">解决</h2>
<ul>
<li>
<p>打开 <code>C:\用户\主机名\.ssh</code> 文件夹</p>
</li>
<li>
<p>新建 <code>config</code> 文件（不带后缀）</p>
</li>
<li>
<p>输入以下内容后保存：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User GitHub注册邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在 Git Bash 执行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<p>出现询问是否连接的提示，输入 <code>yes</code> 回车：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &#x27;[ssh.github.com]:443 ([20.205.243.160]:443)&#x27; can&#x27;t be established.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;[ssh.github.com]:443&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">Hi x-Parker! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div>
<p>成功重新建立 SSH 连接。</p>
</li>
</ul>
<h2 id="另解">另解</h2>
<p>抛弃 SSH 连接方式，使用 HTTPS 连接 Github。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a class="link"   href="https://blog.csdn.net/yunxiaobaobei/article/details/123474599" >https://blog.csdn.net/yunxiaobaobei/article/details/123474599 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/weixin_41287260/article/details/124368189" >https://blog.csdn.net/weixin_41287260/article/details/124368189 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Once Upon a Time in America</title>
    <url>/2024/01/19/Once-Upon-a-Time-in-America/</url>
    <content><![CDATA[<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/19/y9MTUVfmBbJcC5s.jpg"
                      style="zoom: 200%;" 
                >
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell 报错：在此系统上禁止运行脚本</title>
    <url>/2024/01/22/PowerShell-vue%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6-%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>在 Windows PowerShell （管理员模式下）执行 <code>vue --version</code> 命令时报错如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/22/IBWcwtCLqjm2ya3.png"
                      alt=""
                ></p>
<h2 id="原因">原因</h2>
<p>首次在计算机上启动 Windows PowerShell 时，现用执行策略很可能是 Restricted（默认设置）。Restricted 策略不允许任何脚本运行，以防止执行不信任的脚本。</p>
<h2 id="解决">解决</h2>
<p>在 Windows PowerShell 执行以下命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure></div>
<h2 id="效果">效果</h2>
<p>再次执行 <code>vue --version</code> 命令，可正常查看 Vue 版本：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/22/2UpOySQuL3ev5to.png"
                      style="zoom: 50%;"
                >
<h2 id="引用">引用</h2>
<ul>
<li><a class="link"   href="https://cloud.tencent.com/developer/article/1612513" >https://cloud.tencent.com/developer/article/1612513 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 报错：无法创建 index.lock 文件，因其已存在。</title>
    <url>/2024/01/25/Git-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA-index-lock-%E6%96%87%E4%BB%B6%EF%BC%8C%E5%9B%A0%E5%85%B6%E5%B7%B2%E5%AD%98%E5%9C%A8/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>使用 Git 向 Github 部署代码时，出现如下报错：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/VTOAzyM2Jm9pEWH.png"
                      alt=""
                ></p>
<h2 id="原因">原因</h2>
<p>有两个 Git 命令同时运行，可能一种来自命令提示符，另一种来自 IDE 。</p>
<h2 id="解决">解决</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/V2x6Msj5KSDqFp3.png"
                      alt=""
                ><br>
删除报错信息对应路径下已存在的 <code>index.lock</code> 文件即可。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a class="link"   href="https://stackoverflow.com/questions/38004148/another-git-process-seems-to-be-running-in-this-repository" >https://stackoverflow.com/questions/38004148/another-git-process-seems-to-be-running-in-this-repository <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 隐藏特定文章</title>
    <url>/2024/01/25/Hexo-%E9%9A%90%E8%97%8F%E7%89%B9%E5%AE%9A%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>写博客时有隐藏特定文章的需求</p>
<h2 id="解决">解决</h2>
<p>安装并配置 <code>hexo-hide-posts</code> 插件：</p>
<ul>
<li>
<p>在站点根目录下执行 <code>npm install hexo-hide-posts --save</code> 命令</p>
</li>
<li>
<p>在站点根目录下的 <code>_config.yml</code> 文件中添加如下配置：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-hide-posts</span></span><br><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line">  <span class="comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># 留空则默认全部隐藏</span></span><br><span class="line">  <span class="attr">public_generators:</span> []</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>之后写作文章时，在文章属性中添加 <code>hidden: true</code> 即可隐藏文章，形如：</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;Hidden Post&#x27;</span><br><span class="line">date: &#x27;2024/01/25 16:21:16&#x27;</span><br><span class="line"><span class="section">hidden: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></div>
<p>若要查看隐藏文章，可以运行 <code>hexo hidden:list</code> 命令来获取当前所有的已隐藏文章列表及其信息，并通过文章链接访问。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a class="link"   href="https://blog.garryde.com/archives/37712.html" >https://blog.garryde.com/archives/37712.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客中的 Markdown 脚注渲染问题</title>
    <url>/2024/01/25/Markdown-%E8%84%9A%E6%B3%A8%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>Hexo 博客无法正常渲染 Markdown 脚注，如下图所示：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/boT1YRUWje6kIHD.png"
                      alt="Typora 渲染效果"
                ><figcaption>Typora 渲染效果</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/EbtSNxAl4hr681y.png"
                      alt="Hexo 网页渲染效果"
                ><figcaption>Hexo 网页渲染效果</figcaption></figure></p>
<h2 id="原因">原因</h2>
<p>Hexo 默认 Markdown 渲染插件为 <code>hexo-renderer-marked</code> ，而 <code>marked.js</code> 不支持脚注。</p>
<h2 id="解决">解决</h2>
<p>改用支持脚注的 Markdown 渲染插件，如 <code>hexo-renderer-markdown-it</code> 。</p>
<ol>
<li>
<p>在 Hexo 根目录打开 Git Bash ，依次执行以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save <span class="comment"># 卸载 marked 插件</span></span><br><span class="line">npm i hexo-renderer-markdown-it --save <span class="comment"># 安装 markdown-it 插件</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在 Hexo 根目录打开 <code>_config.yml</code> 文件，添加如下配置信息：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>重新生成静态文件，刷新配置信息使其生效。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h2 id="效果">效果</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/5YH4T6U9VxgkBcq.png"
                      style="zoom:50%;" 
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/25/Gv3SotxEdrMzXpi.png"
                      style="zoom:50%;" 
                >
<p>点击脚注可正常跳转。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a class="link"   href="https://github.com/ppoffice/hexo-theme-icarus/issues/572" >https://github.com/ppoffice/hexo-theme-icarus/issues/572 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://seayj.cn/articles/33818/" >https://seayj.cn/articles/33818/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 双击 startup.bat 闪退</title>
    <url>/2024/01/31/Tomcat%E5%8F%8C%E5%87%BBstartup-bat%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>在没有其他进程占用 8080 端口的情况下，双击 Tomcat 的 <code>startup.bat</code> 脚本发生闪退，无法启动。</p>
<h2 id="原因">原因</h2>
<p>未配置 <code>JAVA_HOME</code> 环境变量。</p>
<blockquote>
<p>问题排查过程：</p>
<ul>
<li>在 <code>startup.bat</code> 文件末尾添加一行 <code>pause</code> ，避免 Tomcat 立即退出；</li>
<li>双击 <code>startup.bat</code> ，尝试启动；</li>
<li>未成功启动，终端中提示 <code>JAVA_HOME</code> 与 <code>jre</code> 均未配置，需至少配置二者其一。</li>
</ul>
</blockquote>
<h2 id="解决">解决</h2>
<ul>
<li>方法一：配置 Windows 系统 <code>JAVA_HOME</code> 环境变量（推荐）</li>
<li>方法二：在 <code>startup.bat</code> 文件开头添加 <code>SET JAVA_HOME=Java安装目录</code></li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a class="link"   href="https://blog.51cto.com/u_14783151/2899251" >https://blog.51cto.com/u_14783151/2899251 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/qq496013218/article/details/74517593" >https://blog.csdn.net/qq496013218/article/details/74517593 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows cmd 执行 Java 命令无返回信息</title>
    <url>/2024/02/18/Windows-cmd%E6%89%A7%E8%A1%8Cjava%E5%91%BD%E4%BB%A4%E6%97%A0%E8%BF%94%E5%9B%9E%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>在 Windows 命令行中无法执行 Java 命令且没有任何返回信息：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/18/rmNVClcep816dXR.png"
                      style="zoom:50%;" 
                >
<h2 id="原因">原因</h2>
<p>装了多个 jdk 的话，系统环境变量的第一行可能会出现 <code>C:\ProgramData\Oracle\Java\javapath</code> 路径，系统按该路径查找 jdk 。然而该路径可能并不真实存在，因此命令行中的 Java 命令会因找不到 jdk 而并未运行。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/18/3XM9B4wfPOlsyUi.png"
                      style="zoom:50%;" 
                >
<h2 id="解决">解决</h2>
<p>将自定义的 <code>%JAVA_HOME%\bin\</code> 路径移至第一行，让系统按该路径查找 jdk 。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a class="link"   href="https://blog.csdn.net/qq_41999034/article/details/111604649" >https://blog.csdn.net/qq_41999034/article/details/111604649 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Windows环境变量</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP - 面向切面编程</title>
    <url>/2024/03/05/AOP-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-基础">1. 基础</h2>
<h3 id="1-1-概述">1.1 概述</h3>
<p><strong>AOP</strong>：Aspect Oriented Programming （面向切面编程），即面向特定方法编程。</p>
<p><strong>场景</strong>：</p>
<ul>
<li>统计业务方法的执行耗时</li>
<li>记录操作日志</li>
<li>权限管理</li>
<li>事务管理</li>
<li>……</li>
</ul>
<p><strong>AOP的作用</strong>： 在程序运行期间在不修改源代码的基础上对已有方法进行增强（无侵入性: 解耦）</p>
<p><strong>AOP的优势</strong>：</p>
<ul>
<li>代码无侵入</li>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>维护方便</li>
</ul>
<h3 id="1-2-SpringAOP开发步骤">1.2 SpringAOP开发步骤</h3>
<p><strong>需求</strong>：统计各个业务层方法执行耗时</p>
<p><strong>实现步骤</strong>：</p>
<ol>
<li>导入依赖：在项目pom.xml中导入AOP的依赖</li>
</ol>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>编写AOP程序：针对于特定方法根据业务需要进行编程</li>
</ol>
  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>	<span class="comment">// AOP类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.parker.service.*.*(..))&quot;)</span>  <span class="comment">// 切入点表达式：作用于com.parker.service包下所有接口/类的所有方法，形参和返回值均为任意值</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();	<span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();	<span class="comment">// 调用原始方法运行</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();	<span class="comment">// 记录结束时间</span></span><br><span class="line">        log.info(proceedingJoinPoint.getSignature() + <span class="string">&quot;执行耗时：&#123;&#125;ms&quot;</span>, end - begin);	<span class="comment">// 写入日志</span></span><br><span class="line">        <span class="keyword">return</span> result;	<span class="comment">// 返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="1-3-核心概念">1.3 核心概念</h3>
<ul>
<li><strong>连接点：JoinPoint</strong>，可以被AOP控制的方法（暗含方法执行时的相关信息）</li>
<li><strong>通知：Advice</strong>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</li>
<li><strong>切入点：PointCut</strong>，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li>
<li><strong>切面：Aspect</strong>，描述通知与切入点的对应关系（通知+切入点）</li>
<li><strong>目标对象：Target</strong>，通知所应用的对象</li>
</ul>
<h3 id="1-4-执行流程">1.4 执行流程</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/05/KuSYiaOBDHxesMt.png"
                      alt=""
                >Spring的AOP底层是基于动态代理技术来实现的。也就是说在程序运行的时候，会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强。</p>
<h2 id="2-进阶">2. 进阶</h2>
<h3 id="2-1-通知类型">2.1 通知类型</h3>
<p>Spring中AOP的通知类型：</p>
<ul>
<li>@<strong>Around</strong>：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li>
<li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li>
<li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li>
<li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li>
<li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li>
</ul>
<p>在使用通知时的注意事项：</p>
<ul>
<li>@Around 环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li>
<li>@Around 环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值，否则原始方法执行完毕，是获取不到返回值的</li>
</ul>
<p>当代码中存在大量重复的切入点表达式时，Spring提供了<code>@PointCut</code>注解，该注解的作用是将公共的切入点表达式抽取出来，需要用到时引用该切入点表达式即可，具体形式如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect1</span> &#123;</span><br><span class="line">    <span class="comment">//切入点方法（公共的切入点表达式）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.parker.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知（引用切入点）</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around before ...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>需要注意的是：当切入点方法使用<code>private</code>修饰时，仅能在当前切面类中引用该表达式， 当外部其他切面类中也要引用当前类中的切入点表达式，就需要把<code>private</code>改为<code>public</code>，而在引用的时候，具体的语法为：<code>全类名.方法名()</code>，具体形式如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect2</span> &#123;</span><br><span class="line">    <span class="comment">//引用MyAspect1切面类中的切入点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;com.parker.aspect.MyAspect1.pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect2 -&gt; before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-2-通知顺序">2.2 通知顺序</h3>
<p>当在项目开发当中，我们定义了多个切面类，而多个切面类中多个切入点都匹配到了同一个目标方法。此时当目标方法在运行的时候，这多个切面类当中的这些通知方法都会运行。</p>
<p>在不同切面类中，默认按照切面类的类名字母排序：</p>
<ul>
<li>目标方法前的通知方法：字母排名靠前的先执行</li>
<li>目标方法后的通知方法：字母排名靠前的后执行</li>
</ul>
<p>如果我们想控制通知的执行顺序有两种方式：</p>
<ul>
<li>
<p>修改切面类的类名（这种方式非常繁琐、而且不便管理）</p>
</li>
<li>
<p>使用Spring提供的@Order注解，形如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span>  <span class="comment">// 切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect2</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.parker.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect2 -&gt; before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h3 id="2-3-切入点表达式">2.3 切入点表达式</h3>
<p>切入点表达式：</p>
<ul>
<li>
<p>描述切入点方法的一种表达式</p>
</li>
<li>
<p>作用：主要用来决定项目中的哪些方法需要加入通知</p>
</li>
<li>
<p>常见形式：</p>
<ol>
<li>
<p>execution(……)：根据方法的签名来匹配<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/06/OZcTQEsKVFRunIm.png"
                      alt=""
                ></p>
</li>
<li>
<p>@annotation(……) ：根据注解匹配</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/06/XSDLBROW3YPEdqK.png"
                      alt=""
                ></p>
</li>
</ol>
</li>
</ul>
<h4 id="2-3-1-execution">2.3.1 execution</h4>
<p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) throws 异常?)</span><br></pre></td></tr></table></figure></div>
<p>其中带<code>?</code>的表示可以省略的部分</p>
<ul>
<li>访问修饰符：可省略（比如: public、protected）</li>
<li>包名.类名： 可省略</li>
<li>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</li>
</ul>
<p>可以使用通配符描述切入点</p>
<ul>
<li><code>*</code> ：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li>
<li><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li>
</ul>
<p>注意事项：</p>
<ul>
<li>
<p>根据业务需要，可以使用 且（&amp;&amp;）、或（||）、非（!） 来组合比较复杂的切入点表达式。形如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">execution(* com.itheima.service.DeptService.list(..)) || execution(* com.itheima.service.DeptService.delete(..))</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>切入点表达式的书写建议：</p>
<ul>
<li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 find 开头，更新类方法都是update开头</li>
<li>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性</li>
<li>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 …，使用 * 匹配单个包</li>
</ul>
<h4 id="2-3-2-annotation">2.3.2 @annotation</h4>
<p>如果我们要匹配多个无规则的方法，比如：list()和 delete()这两个方法。这个时候我们基于execution这种切入点表达式来描述就不是很方便了。此时，我们可以借助于另一种切入点表达式annotation来描述这一类的切入点，从而来简化切入点表达式的书写。</p>
<p>实现步骤：</p>
<ol>
<li>
<p>编写自定义注解</p>
</li>
<li>
<p>在业务类要作为连接点的方法上添加自定义注解</p>
</li>
</ol>
<p><strong>自定义注解</strong>：MyLog</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>	<span class="comment">// 作用域</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>	<span class="comment">// 作用时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>业务类</strong>：DeptServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MyLog</span> <span class="comment">// 自定义注解（表示：当前方法属于目标方法）</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Dept&gt; deptList = deptMapper.list();</span><br><span class="line">        <span class="keyword">return</span> deptList;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>切面类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(com.itheima.anno.MyLog)&quot;)</span>	<span class="comment">// annotation切入点表达式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect -&gt; before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-3-3-总结">2.3.3 总结</h4>
<ul>
<li>execution切入点表达式
<ul>
<li>根据我们所指定的方法的描述信息来匹配切入点方法，这种方式也是最为常用的一种方式</li>
<li>如果我们要匹配的切入点方法的方法名不规则，或者有一些比较特殊的需求，通过execution切入点表达式描述比较繁琐</li>
</ul>
</li>
<li>annotation切入点表达式
<ul>
<li>基于注解的方式来匹配切入点方法。这种方式虽然多一步操作，我们需要自定义一个注解，但是相对来比较灵活。我们需要匹配哪个方法，就在方法上加上对应的注解就可以了</li>
</ul>
</li>
</ul>
<h3 id="2-4-连接点">2.4 连接点</h3>
<p>在Spring中用<code>JoinPoint</code>抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p>
<ul>
<li>
<p>对于@Around通知，获取连接点信息只能使用<code>ProceedingJoinPoint</code>类型</p>
</li>
<li>
<p>对于其他四种通知，获取连接点信息只能使用<code>JoinPoint</code>，它是<code>ProceedingJoinPoint</code>的父类型</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName(); <span class="comment">// 获取目标类名</span></span><br><span class="line">	<span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature(); <span class="comment">// 获取目标方法签名</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span>joinPoint.getSignature().getName(); <span class="comment">// 获取目标方法名</span></span><br><span class="line">	Object[] args = joinPoint.getArgs(); <span class="comment">// 获取目标方法运行参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 Windows 环境下 Thunderbird 邮件客户端自启动</title>
    <url>/2024/03/05/%E5%AE%9E%E7%8E%B0Windows%E7%8E%AF%E5%A2%83%E4%B8%8BThunderbird%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>Thunderbird是一款优秀的开源邮件客户端，但在Windows环境下没有自启动选项，且关闭主界面后客户端也会关闭，这种设计不利于在后台接收新邮件提醒。因此，考虑通过其他途径实现Thunderbird的自启动。</p>
<h2 id="实现">实现</h2>
<p>在<code>C:\Users\[用户名]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>路径下创建一个Thunderbird主程序快捷方式，即可实现Thunderbird开机自启。</p>
<blockquote>
<p>推而广之，可用此方式实现其他（任何）程序的开机自启。</p>
</blockquote>
<h2 id="One-more-thing">One more thing</h2>
<p>更进一步，可在Thunderbird客户端安装以下插件：</p>
<ul>
<li>Minimize at startup：启动时最小化到托盘。配合上述自启动设置，可实现开机自启且最小化。</li>
<li>Minimize on Close：点击关闭按钮后最小化到托盘，而不是关闭程序。可避免误关，更重要的是可以拯救强迫症患者。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Thunderbird</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 配置的优先级</title>
    <url>/2024/03/07/SpringBoot%E9%85%8D%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="1-配置文件">1. 配置文件</h2>
<p>配置文件优先级排名（从高到低）：</p>
<ol>
<li>properties配置文件</li>
<li>yml配置文件</li>
<li>yaml配置文件</li>
</ol>
<p>注意事项：虽然SpringBoot支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置。（yml是主流）</p>
<h2 id="2-系统属性和命令行参数">2. 系统属性和命令行参数</h2>
<p>在SpringBoot项目当中除了以上3种配置文件外，SpringBoot为了增强程序的扩展性，除了支持配置文件的配置方式以外，还支持另外两种常见的配置方式：</p>
<ol>
<li>
<p>Java系统属性配置 （格式： -Dkey=value）</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">-Dserver.port=9000</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>命令行参数 （格式：–key=value）</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">--server.port=10010</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>思考：如果项目已经打包上线了，这个时候我们又如何来设置Java系统属性和命令行参数呢？</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">java [-Dserver.port=9000] -jar XXXXX.jar [--server.port=10010]</span><br></pre></td></tr></table></figure></div>
<h2 id="3-总结">3. 总结</h2>
<p>在SpringBoot项目当中，常见的属性配置方式有5种： 3种配置文件，加上2种外部属性的配置(Java系统属性、命令行参数)，优先级从高到低：</p>
<ol>
<li>命令行参数（–xxx=xxx）</li>
<li>java系统属性（-Dxxx=xxx）</li>
<li>application.properties</li>
<li>application.yml</li>
<li>application.yaml（忽略）</li>
</ol>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC 容器对 Bean 的命名规则</title>
    <url>/2024/03/08/IOC-%E5%AE%B9%E5%99%A8%E5%AF%B9-Bean-%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="1-默认规则">1. 默认规则</h2>
<p>在 Spring 中，IOC（控制反转）容器可以自动识别并创建 Bean，而且它默认遵循一定的命名规则。Spring 的 IOC 容器在自动识别 Bean 时通常使用的是<strong>基于类名的驼峰命名规则</strong>。</p>
<p><strong>如果类名以大写字母开头，Spring 将会把它转换为以小写字母开头，并且在容器中注册为 Bean。</strong></p>
<p>例如，假设你有一个名为 <code>UserService</code> 的类，Spring IOC 容器会将它识别为 <code>userService</code> 的 Bean。类似地，<code>UserServiceImpl</code> 会变成 <code>userServiceImpl</code>。</p>
<p>这种自动的 Bean 命名规则存在于 Spring 的默认行为中，这样开发者就不需要显式地在配置文件或注解中指定 Bean 的名称，Spring 会根据类名来自动推断。</p>
<h2 id="2-自定义">2. 自定义</h2>
<p>但是，如果开发者想要<strong>自定义 Bean 的名称</strong>，可以使用 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code> 等注解，并<strong>在括号中指定 Bean 的名称</strong>，例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;myCustomService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyCustomService</span> &#123;</span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在这个例子中，<code>MyCustomServiceImpl</code> 类会被注册到 Spring 容器中，并且 Bean 的名称将会是 <code>myCustomService</code>，而不是自动推断的 <code>myCustomServiceImpl</code>。</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>转载 - SpringBoot 为什么不需要额外安装 Tomcat ？</title>
    <url>/2024/03/07/%E8%BD%AC%E8%BD%BD-SpringBoot%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E9%9C%80%E8%A6%81%E9%A2%9D%E5%A4%96%E5%AE%89%E8%A3%85Tomcat%EF%BC%9F/</url>
    <content><![CDATA[
  <div class="note-large yellow">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>链接</p>

    </div>
    <div class="notel-content">
      <p><a class="link"   href="https://javabetter.cn/springboot/tomcat.html" >https://javabetter.cn/springboot/tomcat.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

    </div>
  </div>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot - Bean 的管理</title>
    <url>/2024/03/08/SpringBoot-Bean%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-Bean的获取">1. Bean的获取</h2>
<p>默认情况下，SpringBoot项目在启动的时候会自动的创建IOC容器(也称为Spring容器)，并且在启动的过程当中会自动的将bean对象都创建好，存放在IOC容器当中。应用程序在运行时需要依赖什么bean对象，就直接进行依赖注入就可以了。</p>
<p>而在Spring容器中提供了一些方法，可以主动从IOC容器中获取到bean对象，下面介绍3种常用方式：</p>
<ol>
<li>
<p>根据name获取bean</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">getBean</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>根据类型获取bean</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>根据name获取bean（带类型转换）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>思考：要从IOC容器当中来获取到bean对象，需要先拿到IOC容器对象，怎么样才能拿到IOC容器呢？</p>
<ul>
<li>想获取到IOC容器，直接将IOC容器对象注入进来就可以了</li>
</ul>
<p>注意事项：</p>
<ul>
<li>上述所说的 【Spring项目启动时，会把其中的bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的bean而言。</li>
</ul>
<h2 id="2-Bean的作用域">2. Bean的作用域</h2>
<p>在Spring中支持五种作用域，后三种在web环境才生效：</p>
<table>
<thead>
<tr>
<th><strong>作用域</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>singleton</td>
<td>容器内同名称的bean只有一个实例（单例）（默认）</td>
</tr>
<tr>
<td>prototype</td>
<td>每次使用该bean时会创建新的实例（非单例）</td>
</tr>
<tr>
<td>request</td>
<td>每个请求范围内会创建新的实例（web环境中，了解）</td>
</tr>
<tr>
<td>session</td>
<td>每个会话范围内会创建新的实例（web环境中，了解）</td>
</tr>
<tr>
<td>application</td>
<td>每个应用范围内会创建新的实例（web环境中，了解）</td>
</tr>
</tbody>
</table>
<p>知道了bean的5种作用域了，我们要怎么去设置一个bean的作用域呢？</p>
<ul>
<li>可以借助Spring中的@Scope注解来进行配置作用域</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/08/GXCRYFwmTeKJILo.png"
                      alt=""
                ></p>
<p>注意事项：</p>
<ul>
<li>
<p>IOC容器中的bean默认使用的作用域：singleton (单例)。默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化(延迟到第一次使用时)</p>
</li>
<li>
<p>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</p>
</li>
<li>
<p>实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性</p>
</li>
</ul>
<h2 id="3-第三方Bean">3. 第三方Bean</h2>
<p>在我们项目开发当中，有的类不是我们自己编写的，而是我们引入的第三方依赖当中提供的。</p>
<p>在pom.xml文件中，引入dom4j：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dom4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>dom4j就是第三方组织提供的。 dom4j中的SAXReader类就是第三方编写的。</p>
</blockquote>
<p>那么我们应该怎样使用并定义第三方的bean呢？</p>
<ul>
<li>如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component 及衍生注解声明bean的，而是需要用到**@Bean**注解。</li>
</ul>
<p><strong>解决方案1：在启动类上添加@Bean标识的方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明第三方 Bean</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将当前方法的返回值对象交给 IOC 容器管理, 成为 IOC 容器 Bean</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><strong>说明：以上在启动类中声明第三方Bean的作法，不建议使用（项目中要保证启动类的纯粹性）</strong></p>
</blockquote>
<p><strong>解决方案2：在配置类中定义@Bean标识的方法</strong></p>
<ul>
<li>如果需要定义第三方Bean时， 通常会单独定义一个配置类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类  (在配置类当中对第三方bean进行集中配置管理)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 声明第三方 bean</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将当前方法的返回值对象交给 IOC 容器管理, 成为 IOC 容器 bean</span></span><br><span class="line">          <span class="comment">// 通过 @Bean 注解的 name/value 属性指定 bean 名称, 如果未指定, 默认是方法名</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">reader</span><span class="params">(DeptService deptService)</span>&#123;</span><br><span class="line">        System.out.println(deptService);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在方法上加上一个@Bean注解，Spring 容器在启动的时候，它会自动的调用这个方法，并将方法的返回值声明为Spring容器当中的Bean对象。</p>
<blockquote>
<p>注意事项 ：</p>
<ul>
<li>
<p>通过@Bean注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名。</p>
</li>
<li>
<p>如果第三方bean需要依赖其它bean对象，直接在bean定义<strong>方法</strong>中设置<strong>形参</strong>即可，容器会根据类型自动装配。</p>
</li>
</ul>
</blockquote>
<p><strong>关于Bean只需要保持一个原则：</strong></p>
<ul>
<li>如果是在项目当中自己定义的类，想将这些类交给IOC容器管理，我们直接使用@Component以及它的衍生注解来声明就可以。</li>
<li>如果这个类它不是自己定义的，而是引入的第三方依赖当中提供的类，而且我们还想将这个类交给IOC容器管理。此时我们就需要在配置类中定义一个方法，在方法上加上一个@Bean注解，通过这种方式来声明第三方的bean对象。</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>转载 - Spring 注解之 @RestController 与 @Controller 的区别</title>
    <url>/2024/03/08/%E8%BD%AC%E8%BD%BD-Spring-%E6%B3%A8%E8%A7%A3%E4%B9%8B-RestController%E4%B8%8E-Controller%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[
  <div class="note-large yellow">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>链接</p>

    </div>
    <div class="notel-content">
      <p><a class="link"   href="https://www.cnblogs.com/east7/p/10462279.html" >https://www.cnblogs.com/east7/p/10462279.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

    </div>
  </div>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 原理</title>
    <url>/2024/03/08/SpringBoot-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-起步依赖">1. 起步依赖</h2>
<p>如果使用了SpringBoot，就不需要繁琐的引入依赖了。我们只需要引入一个依赖就可以了，那就是web开发的起步依赖：springboot-starter-web。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/08/pofdUiauB8l2XQh.png"
                      alt=""
                ></p>
<p>为什么我们只需要引入一个web开发的起步依赖，web开发所需要的所有的依赖都有了呢？</p>
<ul>
<li>因为Maven的依赖传递。</li>
</ul>
<blockquote>
<p>在SpringBoot给我们提供的这些起步依赖当中，已提供了当前程序开发所需要的所有的常见依赖(官网地址：<a class="link"   href="https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters" >https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)。</p>
<p>比如：springboot-starter-web，这是web开发的起步依赖，在web开发的起步依赖当中，就集成了web开发中常见的依赖：json、web、webmvc、tomcat等。我们只需要引入这一个起步依赖，其他的依赖都会自动的通过Maven的依赖传递进来。</p>
</blockquote>
<p><strong>结论：起步依赖的原理就是Maven的依赖传递。</strong></p>
<h2 id="2-自动配置">2. 自动配置</h2>
<h3 id="2-1-概述">2.1 概述</h3>
<p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p>
<blockquote>
<p>比如：我们要进行事务管理、要进行AOP程序的开发，此时就不需要我们再去手动的声明这些bean对象了，我们直接使用就可以从而大大的简化程序的开发，省去了繁琐的配置操作。</p>
</blockquote>
<p>了解了SpringBoot的自动配置，下面我们就来分析自动配置的原理。其实分析自动配置原理就是来解析在SpringBoot项目中，在引入依赖之后是如何将依赖jar包当中所定义的配置类以及bean加载到SpringIOC容器中的。</p>
<h3 id="2-2-常见方案">2.2 常见方案</h3>
<h4 id="2-2-1-方案一">2.2.1 方案一</h4>
<p>@ComponentScan组件扫描</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima&quot;,&quot;com.example&quot;&#125;)</span> <span class="comment">//指定要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>可以想象一下，如果采用以上这种方式来完成自动配置，那我们进行项目开发时，当需要引入大量的第三方的依赖，就需要在<strong>启动类</strong>上配置N多要扫描的包，这种方式会很繁琐。而且这种大面积的扫描性能也比较低。</p>
<p>缺点：</p>
<ol>
<li>使用繁琐</li>
<li>性能低</li>
</ol>
<p><strong>结论：SpringBoot中并没有采用以上这种方案。</strong></p>
</blockquote>
<h4 id="2-2-2-方案二">2.2.2 方案二</h4>
<p>@Import导入</p>
<ul>
<li>导入形式主要有以下几种：
<ol>
<li>导入普通类</li>
<li>导入配置类</li>
<li>导入ImportSelector接口实现类</li>
</ol>
</li>
</ul>
<p>1). 使用@Import导入普通类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(TokenParser.class)</span> <span class="comment">//导入的类会被Spring加载到IOC容器中</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>2). 使用@Import导入配置类：</p>
<ul>
<li>配置类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HeaderParser <span class="title function_">headerParser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeaderParser</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>启动类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(HeaderConfig.class)</span> <span class="comment">//导入配置类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>3). 使用@Import导入ImportSelector接口实现类：</p>
<ul>
<li>ImportSelector接口实现类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">//返回值字符串数组（数组中封装了全限定名称的类）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com.example.HeaderConfig&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>启动类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(MyImportSelector.class)</span> <span class="comment">//导入ImportSelector接口实现类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>4). 使用第三方依赖提供的 @EnableXxxxx 注解</p>
<ul>
<li>第三方依赖中提供的注解</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span><span class="comment">//指定要导入哪些bean对象或配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHeaderConfig &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>在使用时只需在启动类上加上@EnableXxxxx注解即可</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHeaderConfig</span>  <span class="comment">//使用第三方依赖提供的Enable开头的注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以上四种方式都可以完成导入操作，但是第4种方式会更方便更优雅，而这种方式也是SpringBoot当中所采用的方式。</p>
<h3 id="2-3-原理分析">2.3 原理分析</h3>
<h4 id="2-3-1-源码跟踪">2.3.1 源码跟踪</h4>
<p>要搞清楚SpringBoot的自动配置原理，要从SpringBoot启动类上使用的核心注解@SpringBootApplication开始分析：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/x7ajQu8sJOXI1md.png"
                      alt=""
                ></p>
<p>在@SpringBootApplication注解中包含了：</p>
<ul>
<li>元注解</li>
<li>@SpringBootConfiguration</li>
<li>@EnableAutoConfiguration</li>
<li>@ComponentScan</li>
</ul>
<p>自动配置原理源码入口就是@SpringBootApplication注解，在这个注解中封装了3个注解，分别是：</p>
<ul>
<li>@SpringBootConfiguration
<ul>
<li>声明当前类是一个配置类</li>
</ul>
</li>
<li>@ComponentScan
<ul>
<li>进行组件扫描（SpringBoot中默认扫描的是启动类所在的当前包及其子包）</li>
</ul>
</li>
<li>@EnableAutoConfiguration
<ul>
<li>封装了@Import注解（Import注解中指定了一个ImportSelector接口的实现类）
<ul>
<li>在实现类重写的selectImports()方法，读取当前项目下所有依赖jar包中META-INF/spring.factories、META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports两个文件里面定义的配置类（配置类中定义了@Bean注解标识的方法）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当SpringBoot程序启动时，就会加载配置文件当中所定义的配置类，并将这些配置类信息(类的全限定名)封装到String类型的数组中，最终通过@Import注解将这些配置类全部加载到Spring的IOC容器中，交给IOC容器管理。</p>
<blockquote>
<p>在META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中定义的配置类非常多，而且每个配置类中又可以定义很多的bean，那这些bean都会注册到Spring的IOC容器中吗？</p>
<p>答案：并不是。 在声明bean对象时，上面有加一个以@Conditional开头的注解，这种注解的作用就是按照条件进行装配，只有满足条件之后，才会将bean注册到Spring的IOC容器中（下面会详细来讲解）</p>
</blockquote>
<h4 id="2-3-2-Conditional">2.3.2 @Conditional</h4>
<p>我们在跟踪SpringBoot自动配置的源码的时候，在自动配置类声明bean的时候，除了在方法上加了一个@Bean注解以外，还会经常用到一个注解，就是以Conditional开头的这一类的注解。以Conditional开头的这些注解都是条件装配的注解。</p>
<p>@Conditional注解：</p>
<ul>
<li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中。</li>
<li>位置：方法、类</li>
<li>@Conditional本身是一个父注解，派生出大量的子注解：
<ul>
<li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器。</li>
<li>@ConditionalOnMissingBean：判断环境中没有对应的bean(类型或名称)，才注册bean到IOC容器。</li>
<li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li>
</ul>
</li>
</ul>
<h4 id="2-3-3-总结">2.3.3 总结</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/FsylaRI2TDjm6b1.png"
                      alt=""
                ></p>
<p>自动配置的核心就在@SpringBootApplication注解上，SpringBootApplication这个注解底层包含了3个注解，分别是：</p>
<ul>
<li>
<p>@SpringBootConfiguration</p>
</li>
<li>
<p>@ComponentScan</p>
</li>
<li>
<p>@EnableAutoConfiguration</p>
</li>
</ul>
<p>@EnableAutoConfiguration这个注解才是自动配置的核心。</p>
<ul>
<li>它封装了一个@Import注解，Import注解里面指定了一个ImportSelector接口的实现类。</li>
<li>在这个实现类中，重写了ImportSelector接口中的selectImports()方法。</li>
<li>而selectImports()方法中会去读取两份配置文件，并将配置文件中定义的配置类做为selectImports()方法的返回值返回，返回值代表的就是需要将哪些类交给Spring的IOC容器进行管理。</li>
<li>那么所有自动配置类的中声明的bean都会加载到Spring的IOC容器中吗? 其实并不会，因为这些配置类中在声明bean时，通常都会添加@Conditional开头的注解，这个注解就是进行条件装配。而Spring会根据Conditional注解有选择性的进行bean的创建。</li>
<li>@Enable 开头的注解底层，它就封装了一个注解 import 注解，它里面指定了一个类，是 ImportSelector 接口的实现类。在实现类当中，我们需要去实现 ImportSelector  接口当中的一个方法 selectImports 这个方法。这个方法的返回值代表的就是我需要将哪些类交给 spring 的 IOC容器进行管理。</li>
<li>此时它会去读取两份配置文件，一份儿是 spring.factories，另外一份儿是 autoConfiguration.imports。而在  autoConfiguration.imports 这份儿文件当中，它就会去配置大量的自动配置的类。</li>
<li>而前面我们也提到过这些所有的自动配置类当中，所有的 bean都会加载到 spring 的 IOC 容器当中吗？其实并不会，因为这些配置类当中，在声明 bean 的时候，通常会加上这么一类@Conditional 开头的注解。这个注解就是进行条件装配。所以SpringBoot非常的智能，它会根据 @Conditional 注解来进行条件装配。只有条件成立，它才会声明这个bean，才会将这个 bean 交给 IOC 容器管理。</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 后端开发总结</title>
    <url>/2024/03/10/JavaWeb-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>web后端开发现在基本上都是基于标准的三层架构进行开发的，在三层架构当中，Controller控制器层负责接收请求响应数据，Service业务层负责具体的业务逻辑处理，而Dao数据访问层也叫持久层，就是用来处理数据访问操作的，来完成数据库当中数据的增删改查操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/tgSJKPX3FBwZGx6.png"
                      alt=""
                ></p>
<blockquote>
<p>在三层架构当中，前端发起请求首先会到达Controller(不进行逻辑处理)，然后Controller会直接调用Service 进行逻辑处理， Service再调用Dao完成数据访问操作。</p>
</blockquote>
<p>如果我们在执行具体的业务处理之前，需要去做一些通用的业务处理，比如：我们要进行统一的登录校验，我们要进行统一的字符编码等这些操作时，我们就可以借助于Javaweb当中三大组件之一的过滤器Filter或者是Spring当中提供的拦截器Interceptor来实现。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/jIOK7DnacR2uVEG.png"
                      alt=""
                ></p>
<p>而为了实现三层架构层与层之间的解耦，我们学习了Spring框架当中的第一大核心：IOC控制反转与DI依赖注入。</p>
<blockquote>
<p>所谓控制反转，指的是将对象创建的控制权由应用程序自身交给外部容器，这个容器就是我们常说的IOC容器或Spring容器。</p>
<p>而DI依赖注入指的是容器为程序提供运行时所需要的资源。</p>
</blockquote>
<p>除了IOC与DI我们还讲到了AOP面向切面编程，还有Spring中的事务管理、全局异常处理器，以及传递会话技术Cookie、Session以及新的会话跟踪解决方案JWT令牌，阿里云OSS对象存储服务，以及通过Mybatis持久层架构操作数据库等技术。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/lOK2t8nTUq6EVp9.png"
                      alt=""
                ></p>
<p>我们在学习这些web后端开发技术的时候，我们都是基于主流的SpringBoot进行整合使用的。而SpringBoot又是用来简化开发，提高开发效率的。像过滤器、拦截器、IOC、DI、AOP、事务管理等这些技术到底是哪个框架提供的核心功能？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/c73xEmrLOfNjS8o.png"
                      alt=""
                ></p>
<blockquote>
<p>Filter过滤器、Cookie、 Session这些都是传统的JavaWeb提供的技术。</p>
<p>JWT令牌、阿里云OSS对象存储服务，是现在企业项目中常见的一些解决方案。</p>
<p>IOC控制反转、DI依赖注入、AOP面向切面编程、事务管理、全局异常处理、拦截器等，这些技术都是 Spring Framework框架当中提供的核心功能。</p>
<p>Mybatis就是一个持久层的框架，是用来操作数据库的。</p>
</blockquote>
<p>在Spring框架的生态中，对web程序开发提供了很好的支持，如：全局异常处理器、拦截器这些都是Spring框架中web开发模块所提供的功能，而Spring框架的web开发模块，我们也称为：SpringMVC</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/10/Fvtu8Kz6OJyR2oE.png"
                      alt=""
                ></p>
<blockquote>
<p>SpringMVC不是一个单独的框架，它是Spring框架的一部分，是Spring框架中的web开发模块，是用来简化原始的Servlet程序开发的。</p>
</blockquote>
<p>外界俗称的SSM，就是由：SpringMVC、Spring Framework、Mybatis三块组成。</p>
<p>基于传统的SSM框架进行整合开发项目会比较繁琐，而且效率也比较低，所以在现在的企业项目开发当中，基本上都是直接基于SpringBoot整合SSM进行项目开发的。</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven - 分模块设计与开发</title>
    <url>/2024/03/11/Maven-%E5%88%86%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>所谓分模块设计，指的就是我们在设计一个 Java 项目的时候，将一个 Java 项目拆分成多个模块进行开发。</p>
<h2 id="1-未分模块设计的问题">1. 未分模块设计的问题</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/hUQJls9Z1mW74ot.png"
                      style="zoom: 67%;" 
                > 
<p>如果项目不分模块，也就意味着所有的业务代码是不是都写在这一个 Java 项目当中。随着这个项目的业务扩张，项目当中的业务功能可能会越来越多。</p>
<p>假如我们开发的是一个大型的电商项目，里面可能就包括了商品模块的功能、搜索模块的功能、购物车模块、订单模块、用户中心等等。这些所有的业务代码我们都在一个 Java 项目当中编写。</p>
<p>此时大家可以试想一下，假如我们开发的是一个大型的电商网站，这个项目组至少几十号甚至几百号开发人员，这些开发人员全部操作这一个 Java 项目。此时大家就会发现我们项目管理和维护起来将会非常的困难。而且大家再来看，假如在我们的项目当中，我们自己定义了一些通用的工具类以及通用的组件，而公司还有其他的项目组，其他项目组也想使用我们所封装的这些组件和工具类，其实是非常不方便的。因为 Java 项目当中包含了当前项目的所有业务代码，所以就造成了这里面所封装的一些组件会难以复用。</p>
<p><strong>总结起来，主要两点问题：不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p>
<h2 id="2-分模块设计">2. 分模块设计</h2>
<p>分模块设计我们在进行项目设计阶段，就可以将一个大的项目拆分成若干个模块，每一个模块都是独立的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/lb1yva64pVwJgAL.png"
                      alt=""
                ></p>
<p>比如我们可以将商品的相关功能放在商品模块当中，搜索的相关业务功能我都封装在搜索模块当中，还有像购物车模块、订单模块。而为了组件的复用，我们也可以将项目当中的实体类、工具类以及我们定义的通用的组件都单独的抽取到一个模块当中。</p>
<p>如果当前这个模块，比如订单模块需要用到这些实体类以及工具类或者这些通用组件，此时直接在订单模块当中引入工具类的坐标就可以了。这样我们就将一个项目拆分成了若干个模块儿，这就是分模块儿设计。</p>
<p>分模块儿设计之后，大家再来看。我们在进行项目管理的时候，我就可以几个人一组，几个人来负责订单模块儿，另外几个人来负责购物车模块儿，这样更加便于项目的管理以及项目的后期维护。</p>
<p>而且分模块设计之后，如果我们需要用到另外一个模块的功能，我们直接依赖模块就可以了。比如商品模块、搜索模块、购物车订单模块都需要依赖于通用组件当中封装的一些工具类，我只需要引入通用组件的坐标就可以了。</p>
<p><strong>分模块设计就是将项目按照功能/结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p>
<h2 id="3-总结">3. 总结</h2>
<ul>
<li>什么是分模块设计：将项目按照功能拆分成若干个子模块</li>
<li>为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</li>
<li>注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven - 私服</title>
    <url>/2024/03/11/Maven-%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<h2 id="1-场景">1. 场景</h2>
<p>私服其实就是架设在公司局域网内部的一台服务器，就是一种特殊的远程仓库。A 连接上私服之后，他就可以把jar包直接上传到私服当中。B 团队的所有开发人员也连接同一台私服之后，他们就能根据坐标的信息，直接从私服当中将对应的jar包下载到自己的本地仓库，使用依赖当中所提供的一些工具类了。这样我们就可以通过私服来完成资源的共享。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/OSj7seIXlw6ofnL.png"
                      style="zoom:80%;" 
                > 
<p>而如果我们在项目中需要使用其他第三方提供的依赖，如果本地仓库没有，也会自动连接私服下载，如果私服没有，私服此时会自动连接中央仓库，去中央仓库中下载依赖，然后将下载的依赖存储在私服仓库及本地仓库中。</p>
<h2 id="2-介绍">2. 介绍</h2>
<ul>
<li>
<p><strong>私服</strong>：是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p>
</li>
<li>
<p><strong>依赖查找顺序</strong>：</p>
<ul>
<li>本地仓库</li>
<li>私服仓库</li>
<li>中央仓库</li>
</ul>
</li>
<li>
<p><strong>资源上传与下载</strong>：<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/2uxvsBiCMbI3wYO.png"
                      alt="image-20230113163307239" style="zoom:80%;" 
                ><figcaption>image-20230113163307239</figcaption></figure></p>
<p>资源的上传与下载，我们需要做三步配置，执行一条指令：</p>
<ol>
<li>在maven的配置文件中配置连接私服的地址(url地址)。</li>
<li>在maven的配置文件中配置访问私服的用户名、密码。</li>
<li>在项目的pom.xml文件中配置上传资源的位置(url地址)。</li>
</ol>
<p>配置好了上述三步之后，要上传资源到私服仓库，就执行maven生命周期：deploy</p>
<p>接下来，其他项目组的开发人员就可以在项目中直接通过依赖的坐标，引入对应的依赖。如果此时本地仓库没有，就会自动从私服仓库中下载。</p>
<blockquote>
<p>私服仓库说明：</p>
<ul>
<li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li>
<li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li>
<li>Central：存储的是从中央仓库下载下来的依赖。</li>
</ul>
</blockquote>
<blockquote>
<p>项目版本说明：</p>
<ul>
<li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li>
<li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="3-私服配置">3. 私服配置</h2>
<p>使用私服，需要在maven的settings.xml配置文件中，做如下配置：</p>
<ol>
<li>
<p>需要在 <strong>servers</strong> 标签中，配置访问私服的个人凭证(访问的用户名和密码)</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在 <strong>mirrors</strong> 标签中，配置自己私服的连接地址(如果之前配置过阿里云，需要直接替换掉)</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在 <strong>profiles</strong> 标签中，增加如下配置，来指定snapshot快照版本的依赖，依然允许使用</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>如果需要上传自己的项目到私服上，需要在项目的pom.xml文件中，增加如下配置，来配置项目发布的地址(也就是私服的地址)</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- release版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- snapshot版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>发布项目，直接运行 deploy 生命周期即可 (发布时，建议跳过单元测试)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven - 继承与聚合</title>
    <url>/2024/03/11/Maven-%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-继承">1. 继承</h2>
<p>在案例项目分模块开发之后，tlias-pojo、tlias-utils、tlias-web-management中都引入了一个 lombok 的依赖。我们在三个模块中分别配置了一次。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/9wSRAKUvh6YtlMP.png"
                      style="zoom:80%;" 
                > 
<p>如果是做一个大型的项目，这三个模块当中重复的依赖可能会很多很多。如果每一个 Maven 模块里面，我们都来单独的配置一次，功能虽然能实现，但是配置是比较<strong>繁琐</strong>的。</p>
<p>而 Maven 的继承就是用来解决这问题的。</p>
<h3 id="1-1-继承关系">1.1 继承关系</h3>
<h4 id="1-1-1-思路分析">1.1.1 思路分析</h4>
<p>我们可以再创建一个父工程 tlias-parent ，然后让上述的三个模块 tlias-pojo、tlias-utils、tlias-web-management 都来继承这个父工程 。 然后再将各个模块中都共有的依赖，都提取到父工程 tlias-parent中进行配置，只要子工程继承了父工程，依赖它也会继承下来，这样就无需在各个子工程中进行配置了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/OpPHAedtEmB5NLv.png"
                      alt=""
                ></p>
<ul>
<li>
<p>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p>
</li>
<li>
<p>作用：简化依赖配置、统一管理依赖</p>
</li>
<li>
<p>实现：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>....<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="1-1-2-具体实现">1.1.2 具体实现</h4>
<ol>
<li>
<p>创建maven模块 tlias-parent ，该工程为父工程，设置打包方式pom(默认jar)。</p>
<p>父工程 tlias-parent 的 pom.xml 文件配置如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!-- 设置打包方式为 pom --&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Maven打包方式：</p>
<ul>
<li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li>
<li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li>
<li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li>
</ul>
</blockquote>
</li>
<li>
<p>在子工程的 pom.xml 文件中，配置继承关系</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>注意：</p>
<ul>
<li>在子工程中，配置了继承关系之后，坐标中的 groupId 是可以省略的，因为会自动继承父工程的</li>
<li>relativePath指定父工程的 pom 文件的相对位置（如果不指定，将从本地仓库/远程仓库查找该工程）</li>
<li>…/ 代表上一级目录</li>
</ul>
</blockquote>
</li>
<li>
<p>在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）</p>
</li>
</ol>
   <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。</p>
<h3 id="1-2-版本锁定">1.2 版本锁定</h3>
<h4 id="1-2-1-场景">1.2.1 场景</h4>
<p>项目中各个模块共有的这部分依赖，我们可以直接定义在父工程中，从而简化子工程的配置。 然而在项目开发中，还有一部分依赖，并不是各个模块都共有的，可能只是其中的一小部分模块中使用到了这个依赖。</p>
<p>比如：在tlias-web-management、tlias-web-system、tlias-web-report这三个子工程中，都使用到了jwt的依赖。 但是 tlias-pojo、tlias-utils中并不需要这个依赖，那此时，这个依赖，我们不会直接配置在父工程 tlias-parent中，而是哪个模块需要，就在哪个模块中配置。</p>
<p>而由于是一个项目中的多个模块，我们要使用的同一个依赖的版本要一致，这样便于项目依赖的统一管理。比如：jwt依赖，我们都使用的是 0.9.1 这个版本。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/9C48MvVHm1jOa6K.png"
                      alt="image-20230113122213954"
                ><figcaption>image-20230113122213954</figcaption></figure></p>
<p>假如说，项目要升级，要使用到jwt最新版本 0.9.2 中的一个新功能，此时需要将依赖的版本升级到0.9.2，该怎么做呢 ？<br>
第一步：去找当前项目中所有的模块的pom.xml配置文件，看哪些模块用到了jwt的依赖。<br>
第二步：找到这个依赖之后，将其版本version，更换为 0.9.2。</p>
<p><strong>问题：如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改。 很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p>
<p>那我们又该如何来解决这个问题，统一管理各个依赖的版本呢？<br>
答案：Maven的版本锁定功能。</p>
<h4 id="1-2-2-介绍">1.2.2 介绍</h4>
<p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本</p>
<p>父工程：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一管理依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JWT令牌--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>子工程：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JWT令牌--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>注意：</p>
<ul>
<li>
<p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p>
</li>
<li>
<p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p>
</li>
</ul>
</blockquote>
<h4 id="1-2-3-属性配置">1.2.3 属性配置</h4>
<p>我们也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护。 具体语法为：</p>
<ul>
<li>自定义属性</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>引用属性</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>版本集中管理之后，要想修改依赖的版本，就只需要在父工程中自定义属性的位置，修改对应的属性值即可。</p>
<p>例如：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jjwt.version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">jjwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>3.15.1<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxb.version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">jaxb.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation.version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">activation.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxb.runtime.version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">jaxb.runtime.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--统一管理依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JWT令牌--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--阿里云OSS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jaxb.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activation.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no more than 2.3.3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jaxb.runtime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p>
<ul>
<li><code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来。</li>
<li><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li>
</ul>
</blockquote>
<h2 id="2-聚合">2. 聚合</h2>
<p>分模块设计与开发之后，我们的项目被拆分为多个模块，而模块之间的关系，可能错综复杂。 那就比如我们当前的案例项目，结构如下（相对还是比较简单的）：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/KT1FSfDEi2PNA8L.png"
                      style="zoom:67%;" 
                > 
<p>此时，tlias-web-management 模块的父工程是 tlias-parent，该模块又依赖了tlias-pojo、tlias-utils模块。 那此时，我们要想将 tlias-web-management 模块打包，是比较繁琐的。因为在进行项目打包时，maven会从本地仓库中来查找tlias-parent父工程，以及它所依赖的模块tlias-pojo、tlias-utils，而本地仓库目前是没有这几个依赖的。</p>
<p>所以，我们再打包tlias-web-management 模块前，需要将 tlias-parent、tlias-pojo、tlias-utils分别执行install生命周期安装到maven的本地仓库，然后再针对于 tlias-web-management 模块执行package进行打包操作。</p>
<p>如果开发一个大型项目，拆分的模块很多，模块之间的依赖关系错综复杂，那此时要进行项目的打包、安装操作，是非常繁琐的。 而maven的聚合就是来解决这个问题的，通过maven的聚合可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p>
<h3 id="2-1-介绍">2.1 介绍</h3>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/03/11/FTVYsobm538lp1c.png"
                      style="zoom: 80%;" 
                >
<ul>
<li>**聚合：**将多个模块组织成一个整体，同时进行项目的构建。</li>
<li>**聚合工程：**一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li>
<li>**作用：**快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li>
</ul>
<h3 id="2-2-实现">2.2 实现</h3>
<p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。例如，我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--聚合其他模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-web-management<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p>
<h2 id="3-继承与聚合的对比">3 继承与聚合的对比</h2>
<ul>
<li>
<p><strong>作用</strong></p>
<ul>
<li>
<p>聚合用于快速构建项目</p>
</li>
<li>
<p>继承用于简化依赖配置、统一管理依赖</p>
</li>
</ul>
</li>
<li>
<p><strong>相同点：</strong></p>
<ul>
<li>
<p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p>
</li>
<li>
<p>聚合与继承均属于设计型模块，并无实际的模块内容</p>
</li>
</ul>
</li>
<li>
<p><strong>不同点：</strong></p>
<ul>
<li>
<p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p>
</li>
<li>
<p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
</search>
